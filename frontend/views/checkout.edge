@layout('layouts/main')
@set('title', 'Checkout')

@section('body')
  <div class="relative flex flex-col-reverse items-start md:max-w-checkout px-2.5 font-sans md:flex-row w-full"
    {{-- 
      JS as string is not a perfect solution, but an alternative is to use global variables which is even worse.
    --}}
    x-data="{
      status: 'init', // possible values: ['init', 'loading', 'success', 'error']
      statusMessage: '',
      data: {
        firstName: {
          value: '',
          error: false,
          errorMessage: '',
          parser: (value) => value,
          rules: ['required', 'string']
        },
        lastName: {
          value: '',
          error: false,
          errorMessage: '',
          parser: (value) => value,
          rules: ['required', 'string']
        },
        email: {
          value: '',
          error: false,
          errorMessage: '',
          parser: (value) => value,
          rules: ['required', 'email']
        },
        country: {
          value: 'US',
          error: false,
          errorMessage: '',
          parser: (value) => value,
          rules: ['required', 'string']
        },
        postalCode: {
          value: '',
          error: false,
          errorMessage: '',
          parser: (value) => value.replace(/[^0-9]/g, ''),
          rules: ['required', 'numeric', 'minLength:5', 'maxLength:5']
        },
        phone: {
          value: '',
          error: false,
          errorMessage: '',
          parser: (value) => value.replace(/[^0-9]/g, ''),
          rules: ['required', 'numeric', 'minLength:9', 'maxLength:9']
        },
        creditCard: {
          value: '',
          error: false,
          errorMessage: '',
          parser: (value) => value.replace(/[^0-9]/g, ''),
          rules: ['required', 'numeric', 'minLength:16', 'maxLength:16', 'creditCardNumber'],
          onChange: function (e) {
            const res = window.getGreditCardMetadata(this.parser(e.target.value));

            if (!res) return;

            this.metadata.type = res.type;
            this.metadata.codeSize = res.codeSize;
          },
          metadata: {
            type: '',
            codeSize: 3
          }
        },
        CVV: {
          value: '',
          error: false,
          errorMessage: '',
          parser: (value) => value.replace(/[^0-9]/g, ''),
          rules: ['required', 'numeric', 'minLength:3', 'maxLength:3']
        },
        expDate: {
          value: '',
          error: false,
          errorMessage: '',
          defaultErrorMessage: 'Invalid expiration date',
          parser: (value) => value.replace(/\s/g, ''),
          rules: ['required', 'regexMatch:^(0[1-9]|1[0-2])\/?([0-9]{2})$', 'afterCurrentMonth']
        },
      },

      validate(value, rules) {
        let res = {
          isValid: Iodine.is(value, rules)
        };

        if (res.isValid !== true) res.message = Iodine.getErrorMessage(res.isValid);

        return res;
      },

      blur(event) {
        const id = event.target.getAttribute('name');
        const state = this.data[id];
        const { isValid, message } = this.validate(state.parser(state.value), state.rules);

        state.error = isValid !== true;
        state.errorMessage = state.error ? message : '';
      },
      input(event) {
        const id = event.target.getAttribute('name');
        const state = this.data[id];

        state.error = false;
        state.errorMessage = '';
      },

      async submit() {
        let errors = 0;

        this.status = 'loading';

        for (const id of Object.keys(this.data)) {
          const state = this.data[id];
          const { isValid, message } = this.validate(state.parser(state.value), state.rules);

          state.error = isValid !== true;
          state.errorMessage = state.error ? message : '';

          if (state.error) errors = errors + 1;
        }

        if (errors > 0) {
          this.status = 'init';

          return;
        }

        let body = {};

        for (const [key, state] of Object.entries(this.data)) body[key] = state.parser(state.value);
        
        try {
          const request = await fetch('/order', {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
          });

          const response = await request.json();

          if (!request.ok) {
            for (const [key, value] of Object.entries(response)) {
              this.data[key].error = true;
              this.data[key].errorMessage = value[0];
            }

            this.status = 'init';
            this.statusMessage = '';

            return;
          }

          this.status = 'success';
          this.statusMessage = response.message;
        } catch (e) {
          this.status = 'error';
          this.statusMessage = 'An unexpected error occurred. Please try again later.';
        }
      }
    }" 
  >
    <form class="flex-grow w-full pr-3 md:w-auto" id="checkout" @submit.prevent="submit">
      @!component('components/olHeader', {
        text: 'PERSONAL INFORMATION',
        number: 1
      })

      <div class="mb-11 pl-7">
        <div class="flex flex-col md:space-x-3 md:flex-row">
          <div class="flex-1 mt-4.5">
            @!component('components/input', {
              label: 'First name',
              placeholder: 'Elon',
              name: 'firstName'
            })
          </div>
          <div class="flex-1 mt-4.5">
            @!component('components/input', {
              label: 'Last name',
              placeholder: 'Musk',
              name: 'lastName'
            })
          </div>
        </div>

        <div class="mt-4">
          @!component('components/input', {
            label: 'Email',
            placeholder: 'elon@spacex.com',
            name: 'email'
          })
        </div>

        <div class="flex flex-col md:space-x-3 md:flex-row">
          <div class="flex-1 mt-4.5">
            @!component('components/select', {
              label: 'Country',
              defaultSelected: 'US',
              name: 'country',
              options: [{
                label: 'United States',
                value: 'US'
              }, {
                label: 'The Netherlands',
                value: 'NL'
              }, {
                label: 'Sweden',
                value: 'SE'
              }]
            })
          </div>
          <div class="flex-1 mt-4.5">
            @!component('components/input', {
              label: 'Postal Code',
              placeholder: '10001',
              mask: '99999',
              name: 'postalCode'
            })
          </div>
        </div>

        <div class="mt-4">
          @!component('components/input', {
            label: 'Phone Number',
            mask: '(99) 999–99–99',
            placeholder: '(00) 000-00-00',
            name: 'phone'
          })
        </div>
      </div>

      @!component('components/olHeader', {
        text: 'PAYMENTS DETAILS',
        number: 2,
        icon: 'lock-black'
      })

      <div class="mt-4 mb-11 pl-7">
        <div>
          @!component('components/creditCardNumber', {
            label: 'Credit Card Number',
            name: 'creditCard'
          })
        </div>

        <div class="flex flex-col md:space-x-3 md:flex-row">
          <div class="flex-1 mt-4.5">
            @!component('components/input', {
              label: 'Security code',
              repetitivePlaceholder: '*',
              repetitiveMask: '9',
              repetitiveMetadataKey: 'data.creditCard.metadata.codeSize',
              name: 'CVV',
              hint: 'Lorem ipsum dolor sit amet',
            })
          </div>
          <div class="flex-1 mt-4.5">
            @!component('components/input', {
              label: 'Expiration date',
              placeholder: 'MM / YY',
              mask: '99 / 99',
              name: 'expDate'
            })
          </div>
        </div>

        <div class="mt-11">
          @!component('components/button', {
            label: 'COMPLETE PURCHASE',
            type: 'submit',
            form: 'checkout',
            icon: 'shopping-cart-white'
          })
        </div>
      </div>
    </form>

    <div class="w-full p-5 pb-8 mt-2.5 mb-10 bg-white rounded md:mt-10 filter shadow-solid-gray-bottom outline-card md:max-w-card">
      <div class="text-xs font-bold">YOUR ORDER</div>

      @each(item in cart.items)
        <div class="flex flex-row justify-between pt-3">
          <div class="text-xs font-medium">{{ item.name }}</div>
          <div class="text-xs font-medium">$ {{ item.price }}</div>
        </div>
      @end

      <hr class="border-t-1 border-dashed border-gray-250 mt-6 mb-3.5" />

      <div class="flex flex-row justify-between">
        <div class="text-xs font-medium">Total purchases</div>
        <div class="text-xs font-medium">$ {{ Number(cart.totals.subTotal).toFixed(2) }}</div>
      </div>

      <div class="flex flex-row justify-between mt-3">
        <div class="text-xs font-medium">Estimated tax</div>
        <div class="text-xs font-medium">$ {{ cart.totals.tax }}</div>
      </div>

      <hr class="mt-4 mb-2 border-t-2 border-dashed border-gray-250" />

      <div class="flex flex-row justify-between">
        <div class="text-xs font-bold">Total</div>
        <div class="text-2xl font-bold">${{ cart.totals.grandTotal }}</div>
      </div>
    </div>

    @!component('components/statusOverlay')
  </div>
@end
